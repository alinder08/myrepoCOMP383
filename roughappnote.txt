Genetic Relationship Tool (GWAS) Application Note

Aashaka Shah, Alex Linder, Vidya Velayutham

Abstract:

A Genome Wide Association Study (GWAS) is a tool used to analyze whether certain variants are associated with a specific trait of interest. For a GWAS, to successfully determine this association, quality control procedures must be implemented in order to ensure accurate, reproducible, and unbiased results. GWAS uses linear regression to determine associations, and this requires the use of unrelated individuals. Therefore, related individuals in the GWAS data can pose a problem by confounding the results of the study. Currently, the PLINK software provides bioinformaticians a way to conduct quality control checks on the initial GWAS data before it can be utilized in the study. Through the use of Python, an automated pipeline was created that incorporated the major quality control relationship check PLINK commands that need to be performed on the GWAS data, as well as corresponding R plots. This program will allow related individuals to be identified using the PLINK software and visualized from the IBD plots. Individual threshold values for filtering and the choice of viewing plots will be left to user discretion.

Introduction:

GWAS studies have been used frequently in order to determine if a specific variant is associated with a specific trait or disease. However, careful quality control must be first performed on the data used during the GWAS since the sample size for the study it very large. Even small errors, duplicates, or inconsistent data can greatly alter the results of this study. Currently, PLINK commands are generally conducted individually on the data to identify potentially problematic SNPs or individuals. Some of the major quality control steps that are performed on the GWAS data are checking for sample quality, genotype batch quality, gender check, chromosomal aberrations, relatedness, and population structure. (Laurie, 2010) Automated GWAS quality control pipelines have been created that merge the PLINK quality control commands and the principal component analysis. This pipeline incorportates python, PLINK, RScript, and SMARTPCA in order to create a streamlined program to conduct quality control processes. (Ellingson, 2016) However, this pipeline mainly incorporates the PLINK commands in the pipeline, and does not output R plots after major filtering steps. This pipeline incorporates the most of the PLINK commands used by Ellingson et. al., and also includes histograms and IBD plots after major quality control steps.

Implementation:

Three file types, .bed, .bim, and .fam files, obtained from a potential GWAS dataset,  served as the input files for the PLINK commands. The .bim file contained columns with the chromosome, marker ID, genetic distance, physical position, allele 1, and allele 2 fields. The .fam file contained columns with the family ID, sample ID, paternal ID, maternal ID, sex, and affection fields. The .bed file is a file that is written in binary format.

The PLINK Pipeline for Relationship Analysis (PPRA), requires the user to have PLINK, Python, and R installed. The PPRA assumes a certain file structure.  pyPipeUtil.py is a python program designed to assist the user in making in file directory system for storing datasets as well as deleting working and output files from the file structure. Since the PPRA uses relative paths to find the data input files, it must be run from the source directory. The PPRA accepts command line arguments; these arguments include the name of the datasets, an optional geno override value (default geno=0.1), and an optional filter parameter (default being not to filter). If no parameters are provided, the following help message is displayed:

A typical command line executed from the source directory would look like:

 Note the PPRA can be piped into a log file to examine any diagnostic messages generated by PLINK.

As the PPRA executes, the PLINK commands associated with each task print to the output and can be used diagnosing any issues uncovered during processing. If tasks 01 to 05 fail, the PPRA fails, and returns the PLINK exit code which caused the failure.
Note the PPRA can be piped into a log file to examine any diagnostic messages generated by PLINK.

The PPRA is broken up into 6 functions which are:
1.       Task01_CheckSex
2.       Task02_Geno
3.       Task03_HWE
4.       Task04_Prune
5.       Task05_Relationship
6.       Task06_MakePlots

Task01_CheckSex runs the following PLINK command:
..\programs\plink.exe --bfile ..\data\dataset1\1Raw\dataset1 --check-sex --missing  --out ..\data\dataset1\3Wip\dataset1-report

Task02_Geno runs the following PLINK commands:
..\programs\plink.exe --bfile ..\data\dataset1\1Raw\dataset1 --geno .01 --make-bed --out ..\data\dataset1\3Wip\dataset1-report.geno.01
..\programs\plink.exe --bfile ..\data\dataset1\3Wip\dataset1-report.geno.01 --missing  --out ..\data\dataset1\3Wip\dataset1-report.geno.01

Task03_HWE runs the following PLINK command:
..\programs\plink.exe --bfile ..\data\dataset1\3Wip\dataset1-report.geno.01 --hardy --out ..\data\dataset1\3Wip\dataset1-report.geno.01

Task04_Prune runs the following command:
..\programs\plink.exe --bfile ..\data\dataset1\3Wip\dataset1-report.geno.01 --indep-pairwise 50 5 0.3 --out ..\data\dataset1\3Wip\dataset1-report.geno.01

Task05_Relationship runs the following command:
..\programs\plink.exe --bfile ..\data\dataset1\3Wip\dataset1-report.geno.01 --extract ..\data\dataset1\3Wip\dataset1-report.geno.01.prune.in --genome --min 0.05 --out ..\data\dataset1\3Wip\dataset1-report.geno.01.rc

Task06_MakePlots invokes the PIPELINE_Scripts.r. This file, which can be edited by the user, can be used to generate any desired plots for the analysis of the dataset. The provided R scripts produce the following plots:

1.       A histogram of lmiss$F_MISS

The .lmiss file that was created after the variant missing call rate command was conducted was used to create a histogram of the F_MISS values in R. The number of SNPs present in the file before filtering was also calculated.

2.       A histogram of imiss$F_MISS

Similar to the .lmiss file, the .imiss file that was created after the sample missing call rate command was then input into R to create a histogram of the F_MISS values. The number of individuals present after filtering was also counted.

3.       A histogram of postImiss$F_MISS

After the missing call rates under 99% were removed, the new .lmiss file was read into R. A histogram of the new F_MISS values was then made, and the number of SNPs present after the filtering was also calculated.

4.       A histogram of hwe$P

The .hwe file was the output of the hardy weinberg check command in PLINK and contained the exact hardy weinberg test statistics. The p-values from this file were used to plot a histogram. The number of percentage of SNPs that contained a p-value under 1e-06 was generated.

5.       An unfiltered IBD plot of the dataset
6.       An accompanying histogram of pi-hat of the unfiltered IBD plot

After the relationship check PLINK command, the newly generated .genome file was input in R in order to create an ibd plot based on the Z0 and Z1 scores. The Z0 score represents the probability that the IBD is 0, whereas the Z1 score represents the probability that the IBD is 1. Related individuals can be visualized based on their location on the IBD plot. A histogram was also created using the PI_HAT (proportion of IBD) values.

7.       A filtered IBD plot of the dataset (if the filter step has been chosen by the user)
8.       An accompanying histogram of PIi-HAT of the filtered IBD plot (if filter step has been chosen by the user)


The approximate run time for this pipeline, including the PLINK commands and the R plotting, is *insert later*. The approximate memory storage is *insert later*. 


Results:

Using test dataset #1, the histogram plots of F_MISS values were created pre- and post-filtering. The number of SNPs before filtering was 657,366, where as the number of SNPs after filtering went down to 540,524. 2081 individuals were accounted for after the initial missing call rate filtering step took place. After the hardy weinberg PLINK step #4 was conducted, a histogram of p-values was output. 718 SNPs  (or .13% of all SNPs) were shown to have a p-value under 1e-06. The first IBD plot that was created was based on the Z0 and Z1 values before filtering by PI_HAT. (Figure 2) A histogram of these PI_HAT values was also created. (Figure 3) From this histogram, it is clearly seen that PI_HAT values above a threshold of 0.05 was present. After setting the threshold and conducting the next filtering step, the IBD plot and histogram of PI_HAT values were created again. This time, individuals with PI_HAT values greater than 0.05 were all removed.
Although the PLINK commands and R plots generated by this pipeline can be accurately run by hand, an automated version of this procedure ensures that quality these beginning quality control steps are done efficiently and are reproducible. The user is also able to choose threshold values for filtering out individuals and SNPs. Finally, the user is able to control the output plots and summary data that is seen.



Figure 1: Example of a .genome file with the Z0, Z1, and PI_HAT highlighted

Figure 2: IBD plot of Z0 vs Z1 to visualize individual relationships (plot before filtering)

Figure 3: Histogram of PI_HAT values, typically want to remove individuals if above 0.05 (plot before filtering)

References:

Laurie, Cathy C. et al. “Quality Control and Quality Assurance in Genotypic Data for Genome-Wide Association Studies.” Genetic epidemiology 34.6 (2010): 591–602. PMC. Web. 15 Mar. 2018.
Ellingson, Sally R., and David W. Fardo. “Automated Quality Control for Genome Wide Association Studies.” F1000Research 5 (2016): 1889. PMC. Web. 15 Mar. 2018.
Github:

https://github.com/alinder08/myrepoCOMP383


Links:
R download: https://www.r-project.org/
PLINK download: http://zzz.bwh.harvard.edu/plink/
It is recommended that users of PPRA download the Anaconda Distribution, which provides a copy of Python as well as other tools which are useful to bioinformaticians
Anaconda Distribution download: https://www.anaconda.com/download/
